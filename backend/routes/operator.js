const express = require('express');
const { simpleAuth } = require('../middleware/auth');
const connection = require('../config/database');
const router = express.Router();

router.post('/exchange', simpleAuth, async (req, res) => {
  console.log('üü¢ POST /exchange –≤—ã–∑–≤–∞–Ω');
  console.log('üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', req.body);

  const { fromCurrency, toCurrency, amount } = req.body;
  const user = req.user;

  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!amount || amount <= 0) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞:', amount);
      return res.status(400).json({ error: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π' });
    }
    if (fromCurrency === toCurrency) {
      console.log('‚ùå –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã:', fromCurrency, toCurrency);
      return res.status(400).json({ error: '–í–∞–ª—é—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã
    console.log(`üîç –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –¥–ª—è ${fromCurrency}...`);
    const fromRate = await getCurrentRate(fromCurrency);
    console.log(`üîç –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –¥–ª—è ${toCurrency}...`);
    const toRate = await getCurrentRate(toCurrency);

    console.log('üìä –ö—É—Ä—Å—ã –∏–∑ –ë–î:', {
      fromCurrency,
      fromRate,
      toCurrency,
      toRate,
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫—É—Ä—Å—ã –Ω–∞–π–¥–µ–Ω—ã
    if (fromRate === null || toRate === null) {
      console.error('‚ùå –ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return res.status(400).json({ error: '–ö—É—Ä—Å—ã –¥–ª—è –≤–∞–ª—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
    }

    // –†–∞—Å—á–µ—Ç
    const result = (amount * fromRate) / toRate;
    console.log(
      'üßÆ –†–∞—Å—á–µ—Ç:',
      `${amount} √ó ${fromRate} / ${toRate} = ${result}`
    );

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    connection.query(
      'INSERT INTO operations_log (user_id, action_description, datetime) VALUES ((SELECT id FROM users WHERE login = ?), ?, NOW())',
      [
        user.login,
        `–û–±–º–µ–Ω ${amount} ${fromCurrency} -> ${result.toFixed(2)} ${toCurrency}`,
      ],
      (error) => {
        if (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
          return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏' });
        }

        console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        res.json({
          success: true,
          result: result.toFixed(2),
          rate: (fromRate / toRate).toFixed(4),
        });
      }
    );
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});
const getCurrentRate = async (currencyCode) => {
  return new Promise((resolve, reject) => {
    console.log(`üîç –ò—â–µ–º –∫—É—Ä—Å –¥–ª—è: ${currencyCode}`);

    connection.query(
      'SELECT rate FROM currency_rates WHERE currency_code = ? ORDER BY date DESC LIMIT 1',
      [currencyCode],
      (error, results) => {
        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ë–î –¥–ª—è ${currencyCode}:`, error);
          reject(error);
          return;
        }

        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è ${currencyCode}:`, results);
        resolve(results[0] ? results[0].rate : null);
      }
    );
  });
};
module.exports = router;
