// const express = require('express');
// const authRoutes = require('./routes/auth').router;
// const operatorRoutes = require('./routes/operator');
// const adminRoutes = require('./routes/admin');
// const path = require('path');
// require('dotenv').config();
// const PORT = 3000;
// const connection = require('./config/database');

// const app = express();

// app.use(express.json());
// app.use(require('cors')());

// // —Ä–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
// app.use(express.static(path.join(__dirname, '../frontend/dist')));

// // Routes
// app.use('/api/auth', authRoutes);
// app.use('/api/operator', operatorRoutes);
// app.use('/api/admin', adminRoutes);

// // –¥–ª—è SPA —Ä–æ—É—Ç–∏–Ω–≥–∞
// app.get('/*', (req, res) => {
//   res.sendFile(path.join(__dirname, '../frontend/dist/index.html'));
// });

// // –ù–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç - –ø–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏–∑ –ë–î
// app.get('/api/rates', (req, res) => {
//   connection.query('SELECT * FROM currency_rates', (error, results) => {
//     if (error) {
//       console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
//       return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
//     }
//     res.json(results); // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫–ª–∏–µ–Ω—Ç—É
//   });
// });

// // connection –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

// app.get('/api/rates', (req, res) => {
//   connection.query(
//     'SELECT currency_code, rate FROM currency_rates ORDER BY date DESC',
//     (error, results) => {
//       if (error) {
//         console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫—É—Ä—Å–æ–≤:', error);
//         return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
//       }
//       console.log('üìã –ö—É—Ä—Å—ã –∏–∑ –ë–î:', results); // –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
//       res.json(results);
//     }
//   );
// });

// app.get('/api/rates/:currency', (req, res) => {});

// app.listen(PORT, () => {
//   console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
// });

const express = require('express');
const authRoutes = require('./routes/auth').router;
const operatorRoutes = require('./routes/operator');
const adminRoutes = require('./routes/admin');
require('dotenv').config();
const PORT = process.env.PORT || 3000;

const app = express();

app.use(express.json());
app.use(require('cors')());

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/operator', operatorRoutes);
app.use('/api/admin', adminRoutes);

app.get('/api/rates', (req, res) => {
  const connection = require('./config/database');
  connection.query('SELECT * FROM currency_rates', (error, results) => {
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
    }
    res.json(results);
  });
});

// ‚úÖ –°–£–ü–ï–†-–ü–†–û–°–¢–û–ô –ö–û–†–ù–ï–í–û–ô –†–û–£–¢
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
      <head>
        <title>–û–±–º–µ–Ω–Ω–∏–∫ –≤–∞–ª—é—Ç - –†–∞–±–æ—Ç–∞–µ—Ç! üéâ</title>
        <meta charset="UTF-8">
        <style>
          * { margin: 0; padding: 0; box-sizing: border-box; }
          body { 
            font-family: 'Segoe UI', Arial, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
          }
          .container { 
            background: white; 
            padding: 40px; 
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            max-width: 500px;
            width: 100%;
            text-align: center;
          }
          h1 { 
            color: #333; 
            margin-bottom: 20px;
            font-size: 2.5em;
          }
          .success { 
            color: #28a745; 
            font-size: 1.2em;
            font-weight: bold;
            margin: 20px 0;
          }
          .btn { 
            padding: 15px 30px; 
            margin: 10px; 
            font-size: 16px; 
            background: #007bff; 
            color: white; 
            border: none; 
            border-radius: 8px; 
            cursor: pointer;
            transition: all 0.3s;
            font-weight: bold;
          }
          .btn:hover { 
            background: #0056b3; 
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,123,255,0.3);
          }
          .btn-admin { background: #28a745; }
          .btn-admin:hover { background: #1e7e34; }
          .btn-operator { background: #17a2b8; }
          .btn-operator:hover { background: #138496; }
          .test-section { 
            background: #f8f9fa; 
            padding: 20px; 
            border-radius: 10px;
            margin: 20px 0;
          }
          #result { 
            margin-top: 20px; 
            text-align: left; 
            background: white;
            padding: 15px;
            border-radius: 8px;
            border: 1px solid #dee2e6;
            max-height: 300px;
            overflow-y: auto;
          }
          .user-info {
            display: flex;
            justify-content: space-between;
            margin: 15px 0;
            padding: 15px;
            background: #e7f3ff;
            border-radius: 8px;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <h1>üè¶ –û–±–º–µ–Ω–Ω–∏–∫ –≤–∞–ª—é—Ç</h1>
          <div class="success">‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!</div>
          <p>Full-stack –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π</p>
          
          <div class="user-info">
            <div><strong>–ê–¥–º–∏–Ω:</strong> admin / admin123</div>
            <div><strong>–û–ø–µ—Ä–∞—Ç–æ—Ä:</strong> operator / operator123</div>
          </div>

          <div class="test-section">
            <h3>–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç:</h3>
            <button class="btn btn-admin" onclick="login('admin', 'admin123')">–í–æ–π—Ç–∏ –∫–∞–∫ –ê–¥–º–∏–Ω</button>
            <button class="btn btn-operator" onclick="login('operator', 'operator123')">–í–æ–π—Ç–∏ –∫–∞–∫ –û–ø–µ—Ä–∞—Ç–æ—Ä</button>
            <button class="btn" onclick="testRates()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É—Ä—Å—ã</button>
          </div>

          <div id="result"></div>
        </div>
        
        <script>
          async function login(login, password) {
            try {
              showResult('‚åõ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');
              const response = await fetch('/api/auth/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ login, password })
              });
              const data = await response.json();
              
              if (data.success) {
                showResult('‚úÖ –£–°–ü–ï–®–ù–´–ô –í–•–û–î!\\\\n\\\\n' + 
                  '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ' + data.user.login + '\\\\n' +
                  '–†–æ–ª—å: ' + data.user.role + '\\\\n\\\\n' +
                  'API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã.');
              } else {
                showResult('‚ùå –û—à–∏–±–∫–∞: ' + data.error);
              }
            } catch (error) {
              showResult('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error);
            }
          }
          
          async function testRates() {
            try {
              showResult('‚åõ –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤...');
              const response = await fetch('/api/rates');
              const data = await response.json();
              showResult('üìä –ö–£–†–°–´ –í–ê–õ–Æ–¢:\\\\n\\\\n' + 
                data.map(rate => rate.currency_code + ': ' + rate.rate).join('\\\\n'));
            } catch (error) {
              showResult('‚ùå –û—à–∏–±–∫–∞: ' + error);
            }
          }
          
          function showResult(message) {
            document.getElementById('result').innerHTML = 
              '<pre style="white-space: pre-wrap;">' + message + '</pre>';
          }

          // –ê–≤—Ç–æ-—Ç–µ—Å—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
          setTimeout(() => testRates(), 1000);
        </script>
      </body>
    </html>
  `);
});

app.listen(PORT, () => {
  console.log('üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ' + PORT);
  console.log('‚úÖ –ë—ç–∫–µ–Ω–¥ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
});
